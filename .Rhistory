summarize(mean(totalDriveHome)) %>%
unlist() %>%
unname() %>%
as.double() * 60
commute$carDepart_Evening[1] + averageDriveHomeSec
commuteImputed <- commute %>% mutate(arriveHomeImp = ifelse((is.na(arriveHome) & !is.na(carDepart_Evening)),
carDepart_Evening + averageDriveHomeSec,
arriveHome))
(commuteImputed %>% select(trainNum_Evening, carDepart_Evening, arriveHome, arriveHomeImp))
commute$carDepart_Evening[1] + averageDriveHomeSec
commuteImputed <- commute %>% mutate(arriveHomeImp = dplyr::if_else((is.na(arriveHome) & !is.na(carDepart_Evening)),
carDepart_Evening + averageDriveHomeSec,
arriveHome))
(commuteImputed %>% select(trainNum_Evening, carDepart_Evening, arriveHome, arriveHomeImp))
sessionInfo()
runApp()
?sidebarMenu
styler:::style_active_file()
runApp()
runApp()
rsconnect::deployApp("C:\\Users\\thomas.gardner\\Documents\\R\\commuteR")
shiny::runApp()
runApp()
?formatDate
runApp()
runApp()
styler:::style_selection()
runApp()
shiny::runApp()
?gs_read
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?cols
?col_datetime
runApp()
runApp()
runApp()
?formatDate
runApp()
?toutcstring
?formatDate
runApp()
?date_format
runApp()
?formatDate
runApp()
?datatable
runApp()
?JS
runApp()
?BOX
?box
styler:::style_active_file()
runApp()
rm(a)
runApp()
runApp()
commute %>% select(totalCommute_Morning, totalCommute_Evening)
commute %>% select(totalCommute_Morning, totalCommute_Evening) %>%
summarize(meanMorningCommute = mean(totalCommute_Morning),
meanEveningCommute = mean(totalCommute_Evening))
?summarize
styler:::style_selection()
commute %>%
filter(!is.na(totalCommute_Morning))
commute %>%
filter(!is.na(totalCommute_Morning)) %>%
select(totalCommute_Morning) %>%
summarize(
meanMorningCommute = mean(totalCommute_Morning)
)
eveningCommuteAverage <- commute %>%
filter(!is.na(totalCommute_Evening)) %>%
select(totalCommute_Evening) %>%
summarize(
meanEveningCommute = mean(totalCommute_Evening)
)
commute %>%
filter(!is.na(totalCommute_Evening)) %>%
select(totalCommute_Evening) %>%
summarize(
meanEveningCommute = mean(totalCommute_Evening)
)
runApp()
?infoBox
styler:::style_active_file()
runApp()
?round
runApp()
shiny::runApp()
commute %>% filter(!is.na(mpg_Morning)) %>%
group_by(route_Morning) %>%
summarize(meanMPG = mean(mpg_Morning))
eveningMPG <- commute %>% filter(!is.na(mpg_Evening)) %>%
group_by(route_Evening) %>%
summarize(meanMPG = mean(mpg_Evening))
commute %>% filter(!is.na(mpg_Evening)) %>%
group_by(route_Evening) %>%
summarize(meanMPG = mean(mpg_Evening))
rsconnect::deployApp('C:/Users/thomas.gardner/Documents/R/commuteR')
# MPG Analysis----
morningMPG <- commute %>% filter(!is.na(mpg_Morning)) %>%
group_by(route_Morning) %>%
summarize(meanMPG = mean(mpg_Morning))
library("googlesheets")
library("ggplot2")
library("DT")
library("lubridate")
library("shinydashboard")
library("shiny")
library("tidyverse")
# MPG Analysis----
morningMPG <- commute %>% filter(!is.na(mpg_Morning)) %>%
group_by(route_Morning) %>%
summarize(meanMPG = mean(mpg_Morning))
eveningMPG <- commute %>% filter(!is.na(mpg_Evening)) %>%
group_by(route_Evening) %>%
summarize(meanMPG = mean(mpg_Evening))
commute %>% filter(!is.na(mpg_Morning)) %>%
group_by(route_Morning) %>%
summarize(meanMPG = mean(mpg_Morning))
commute %>% filter(!is.na(mpg_Evening)) %>%
group_by(route_Evening) %>%
summarize(meanMPG = mean(mpg_Evening))
commute %>% filter(!is.na(mpg_Morning)) %>%
group_by(route_Morning) %>%
summarize(meanMPG = mean(mpg_Morning), count = n())
commute %>% filter(!is.na(mpg_Evening)) %>%
group_by(route_Evening) %>%
summarize(meanMPG = mean(mpg_Evening), count = n())
?t.test
morningMPG <- commute %>% filter(!is.na(mpg_Morning))
eveningMPG <- commute %>% filter(!is.na(mpg_Evening))
eveningMPG
morningMPG <- commute %>% filter(!is.na(mpg_Morning)) %>% select(mpg_Morning)
eveningMPG <- commute %>% filter(!is.na(mpg_Evening)) %>% select(mpg_Evening)
morningMPG
eveningMPG
morningMPG
t.test(x=morningMPG, y=eveningMPG)
t.test(x=as.numeric(morningMPG), y=as.numeric(eveningMPG))
t.test(x=as.numeric(morningMPG), y=as.numeric(eveningMPG), alternative="two.sided")
as.vector(morningMPG)
t.test(x=as.vector(morningMPG), y=as.vector(eveningMPG), alternative="two.sided")
t.test(formula = morningMPG ~ eveningMPG)
morningMPG <- commute %>% filter(!is.na(mpg_Morning)) %>%
select(mpg_Morning) %>%
as.vector()
eveningMPG <- commute %>% filter(!is.na(mpg_Evening)) %>%
select(mpg_Evening) %>%
as.vector()
t.test(formula = morningMPG ~ eveningMPG)
morningMPG <- commute %>% filter(!is.na(mpg_Morning)) %>%
select(mpg_Morning) %>%
as.vector()
morningMPG
library("googlesheets")
library("ggplot2")
library("DT")
library("lubridate")
library("shinydashboard")
library("shiny")
library("tidyverse")
Sys.setenv(TZ = "UTC")
# Load 2018 Tracker ----
tracker <- gs_url(
x      = "https://docs.google.com/spreadsheets/d/11JAREyf0pTdR0d0b_DXDjOsI8P5L2WH_P31ALfqtSXI/edit?usp=sharing",
lookup = TRUE
)
# Read 'commute' tab (ws = 2) ----
commuteRaw <- gs_read(
ss = tracker,
ws = 2,
range = cell_cols('A:T'),
locale = locale(tz = "UTC"),
col_types = cols(date                   = col_date(format = "%y-%m-%d"),
alarm                  = col_time(),
departHouse            = 't',
arrivePlatform_Morning = 't',
route_Morning          = 'c',
mpg_Morning            = 'd',
score_Morning          = 'i',
trainNum_Morning       = 'c',
trainDepart_Morning    = 't',
trainArrive_Morning    = 't',
arriveWork             = 't',
departWork             = 't',
trainNum_Evening       = 'c',
arrivePlatform_Evening = 't',
trainDepart_Evening    = 't',
carDepart_Evening      = 't',
arriveHome             = col_time(),
route_Evening          = 'c',
mpg_Evening            = 'd',
score_Evening          = 'i')
)
# Remove future rows ----
commuteRaw <- commuteRaw %>% filter(date <= Sys.Date())
# Convert times to POSIXct ----
commute <- commuteRaw %>% mutate(alarm               = as.POSIXct(alarm, format="%H:%M"),
arriveHome             = as.POSIXct(arriveHome, format="%H:%M"), #, tz="America/New_York"),
arrivePlatform_Morning = as.POSIXct(arrivePlatform_Morning, format="%H:%M"),
arriveWork             = as.POSIXct(arriveWork, format="%H:%M"),
carDepart_Evening      = as.POSIXct(carDepart_Evening, format="%H:%M"),
departHouse            = as.POSIXct(departHouse, format="%H:%M"),
departWork             = as.POSIXct(departWork, format="%H:%M"),
arrivePlatform_Evening = as.POSIXct(arrivePlatform_Evening, format="%H:%M"),
trainArrive_Morning    = as.POSIXct(trainArrive_Morning, format="%H:%M"),
trainDepart_Evening    = as.POSIXct(trainDepart_Evening, format="%H:%M"),
trainDepart_Morning    = as.POSIXct(trainDepart_Morning, format="%H:%M"))
# Compute fields ----
commute <- commute %>% mutate(totalCommute_Morning = arriveWork - departHouse,
totalCommute_Evening = arriveHome - departWork,
totalGoneForDay      = arriveHome - departHouse,
totalDriveHome       = arriveHome - carDepart_Evening)
# Train Ride Density Plot
# tempPlotData <- commute %>% filter(trainNum_Morning == "328") %>%
#   select(departHouse, arrivePlatform_Morning, trainDepart_Morning, trainArrive_Morning, arriveWork) %>%
#   gather()
#
# plot <- data.frame(tempPlotData) %>% ggplot(aes(x=value, fill=key))
# plot + geom_density(alpha=0.25)
# plot <- data.frame(commute) %>% ggplot(aes(x=arriveWork))
# plot + geom_density()
#
# plot <- data.frame(commute) %>% ggplot(aes(x=alarm))
# plot + geom_density()
# Correct Google Sheet Format (spread and rewrite to sheets) --------------
# commute <- commute %>% select(date, alarm, departHouse, arrivePlatform_Morning, route_Morning,
#                               mpg_Morning, score_Morning, trainNum_Morning, trainDepart_Morning,
#                               trainArrive_Morning, arriveWork, departWork, trainNum_Evening,
#                               trainArrive_Evening, trainDepart_Evening, carDepart_Evening,
#                               arriveHome, route_Evening, mpg_Evening, score_Evening) %>%
#         rename(arrivePlatform_Evening = trainArrive_Evening,
#                arriveCar_Evening      = carDepart_Evening)
#
# googlesheets::gs_ws_new(ss = tracker,
#                         ws_title = "commute")
# gs_gs(tracker)
# googlesheets::gs_edit_cells(ss = tracker,
#                             ws = 4,
#                             input = commute,
#                             anchor = "A1",
#                             col_names = TRUE)
# MPG Analysis----
morningMPG_Mean <- commute %>% filter(!is.na(mpg_Morning)) %>%
group_by(route_Morning) %>%
summarize(meanMPG = mean(mpg_Morning), count = n())
eveningMPG_Mean <- commute %>% filter(!is.na(mpg_Evening)) %>%
group_by(route_Evening) %>%
summarize(meanMPG = mean(mpg_Evening), count = n())
morningMPG <- commute %>% filter(!is.na(mpg_Morning)) %>%
select(mpg_Morning) %>%
as.vector()
eveningMPG <- commute %>% filter(!is.na(mpg_Evening)) %>%
select(mpg_Evening) %>%
as.vector()
morningMPG <- commute %>% filter(!is.na(mpg_Morning)) %>%
select(mpg_Morning) %>%
pull()
eveningMPG <- commute %>% filter(!is.na(mpg_Evening)) %>%
select(mpg_Evening) %>%
as.vector()
library("googlesheets")
library("ggplot2")
library("DT")
library("lubridate")
library("shinydashboard")
library("shiny")
library("tidyverse")
Sys.setenv(TZ = "UTC")
# Load 2018 Tracker ----
tracker <- gs_url(
x      = "https://docs.google.com/spreadsheets/d/11JAREyf0pTdR0d0b_DXDjOsI8P5L2WH_P31ALfqtSXI/edit?usp=sharing",
lookup = TRUE
)
# Read 'commute' tab (ws = 2) ----
commuteRaw <- gs_read(
ss = tracker,
ws = 2,
range = cell_cols('A:T'),
locale = locale(tz = "UTC"),
col_types = cols(date                   = col_date(format = "%y-%m-%d"),
alarm                  = col_time(),
departHouse            = 't',
arrivePlatform_Morning = 't',
route_Morning          = 'c',
mpg_Morning            = 'd',
score_Morning          = 'i',
trainNum_Morning       = 'c',
trainDepart_Morning    = 't',
trainArrive_Morning    = 't',
arriveWork             = 't',
departWork             = 't',
trainNum_Evening       = 'c',
arrivePlatform_Evening = 't',
trainDepart_Evening    = 't',
carDepart_Evening      = 't',
arriveHome             = col_time(),
route_Evening          = 'c',
mpg_Evening            = 'd',
score_Evening          = 'i')
)
# Remove future rows ----
commuteRaw <- commuteRaw %>% filter(date <= Sys.Date())
# Convert times to POSIXct ----
commute <- commuteRaw %>% mutate(alarm               = as.POSIXct(alarm, format="%H:%M"),
arriveHome             = as.POSIXct(arriveHome, format="%H:%M"), #, tz="America/New_York"),
arrivePlatform_Morning = as.POSIXct(arrivePlatform_Morning, format="%H:%M"),
arriveWork             = as.POSIXct(arriveWork, format="%H:%M"),
carDepart_Evening      = as.POSIXct(carDepart_Evening, format="%H:%M"),
departHouse            = as.POSIXct(departHouse, format="%H:%M"),
departWork             = as.POSIXct(departWork, format="%H:%M"),
arrivePlatform_Evening = as.POSIXct(arrivePlatform_Evening, format="%H:%M"),
trainArrive_Morning    = as.POSIXct(trainArrive_Morning, format="%H:%M"),
trainDepart_Evening    = as.POSIXct(trainDepart_Evening, format="%H:%M"),
trainDepart_Morning    = as.POSIXct(trainDepart_Morning, format="%H:%M"))
# Compute fields ----
commute <- commute %>% mutate(totalCommute_Morning = arriveWork - departHouse,
totalCommute_Evening = arriveHome - departWork,
totalGoneForDay      = arriveHome - departHouse,
totalDriveHome       = arriveHome - carDepart_Evening)
# Train Ride Density Plot
# tempPlotData <- commute %>% filter(trainNum_Morning == "328") %>%
#   select(departHouse, arrivePlatform_Morning, trainDepart_Morning, trainArrive_Morning, arriveWork) %>%
#   gather()
#
# plot <- data.frame(tempPlotData) %>% ggplot(aes(x=value, fill=key))
# plot + geom_density(alpha=0.25)
# plot <- data.frame(commute) %>% ggplot(aes(x=arriveWork))
# plot + geom_density()
#
# plot <- data.frame(commute) %>% ggplot(aes(x=alarm))
# plot + geom_density()
# Correct Google Sheet Format (spread and rewrite to sheets) --------------
# commute <- commute %>% select(date, alarm, departHouse, arrivePlatform_Morning, route_Morning,
#                               mpg_Morning, score_Morning, trainNum_Morning, trainDepart_Morning,
#                               trainArrive_Morning, arriveWork, departWork, trainNum_Evening,
#                               trainArrive_Evening, trainDepart_Evening, carDepart_Evening,
#                               arriveHome, route_Evening, mpg_Evening, score_Evening) %>%
#         rename(arrivePlatform_Evening = trainArrive_Evening,
#                arriveCar_Evening      = carDepart_Evening)
#
# googlesheets::gs_ws_new(ss = tracker,
#                         ws_title = "commute")
# gs_gs(tracker)
# googlesheets::gs_edit_cells(ss = tracker,
#                             ws = 4,
#                             input = commute,
#                             anchor = "A1",
#                             col_names = TRUE)
# MPG Analysis----
morningMPG_Mean <- commute %>% filter(!is.na(mpg_Morning)) %>%
group_by(route_Morning) %>%
summarize(meanMPG = mean(mpg_Morning), count = n())
eveningMPG_Mean <- commute %>% filter(!is.na(mpg_Evening)) %>%
group_by(route_Evening) %>%
summarize(meanMPG = mean(mpg_Evening), count = n())
morningMPG <- commute %>% filter(!is.na(mpg_Morning)) %>%
select(mpg_Morning) %>%
pull()
eveningMPG <- commute %>% filter(!is.na(mpg_Evening)) %>%
select(mpg_Evening) %>%
pull()
t.test(formula = morningMPG ~ eveningMPG)
t.test(x = morningMPG, y = eveningMPG)
tTest <- t.test(x = morningMPG, y = eveningMPG)
tTest$statistic
tTest$p.value
mpgTestTable <- tibble(mean(morningMPG_Vec),
mean(eveningMPG_Vec),
mean(morningMPG_Vec) - mean(eveningMPG_Vec),
tTest$p.value)
morningMPG_Vec <- commute %>% filter(!is.na(mpg_Morning)) %>%
select(mpg_Morning) %>%
pull()
eveningMPG_Vec <- commute %>% filter(!is.na(mpg_Evening)) %>%
select(mpg_Evening) %>%
pull()
tTest <- t.test(x = morningMPG_Vec, y = eveningMPG_Vec)
mpgTestTable <- tibble(mean(morningMPG_Vec),
mean(eveningMPG_Vec),
mean(morningMPG_Vec) - mean(eveningMPG_Vec),
tTest$p.value)
mpgTestTable
?switch
tTestSignificance <- if_else(tTest$p.value > 0.1, "",
if_else(tTest$p.value > 0.05, "*",
if_else(tTest$.p.value > 0.01, "**", "***")))
styler:::style_selection()
tTestSignificance <- if_else(tTest$p.value > 0.1, "",
if_else(tTest$p.value > 0.05, "*",
if_else(tTest$.p.value > 0.01, "**", "***")))
tTestSignificance <-
if(tTest$p.value > 0.1) {
return("")
}
tTestSignificance
tTestSignificance <-
if(tTest$p.value < 0.1) {
return("")
}
tTestSignificance <-
if(tTest$p.value < 0.1) {
""
}
tTestSignificance <-
if(tTest$p.value < 0.1) {
"test"
}
tTestSignificance
tTestSignificance <-
if(tTest$p.value < 0.1) {
""
} else if(test$p.value < 0.05)  {
"*"
} else if(test$p.value < 0.01)  {
"**"
} else {
"***"
}
tTestSignificance
tTestSignificance <-
if(tTest$p.value > 0.1) {
""
} else if(test$p.value > 0.05)  {
"*"
} else if(test$p.value > 0.01)  {
"**"
} else {
"***"
}
tTestSignificance
tTestSignificance <-
if(tTest$p.value > 0.10) {
""
} else if(test$p.value > 0.05)  {
"*"
} else if(test$p.value > 0.01)  {
"**"
} else {
"***"
}
tTestSignificance <-
if(tTest$p.value > 0.10) {
""
} else if(tTest$p.value > 0.05)  {
"*"
} else if(tTest$p.value > 0.01)  {
"**"
} else {
"***"
}
tTestSignificance
?pull
morningMPG_Vec <- commute %>% filter(!is.na(mpg_Morning)) %>%
pull(mpg_Morning)
morningMPG_Mean <- commute %>%
filter(!is.na(mpg_Morning)) %>%
group_by(route_Morning) %>%
summarize(meanMPG = mean(mpg_Morning), count = n())
eveningMPG_Mean <- commute %>%
filter(!is.na(mpg_Evening)) %>%
group_by(route_Evening) %>%
summarize(meanMPG = mean(mpg_Evening), count = n())
morningMPG_Vec <- commute %>%
filter(!is.na(mpg_Morning)) %>%
pull(mpg_Morning)
eveningMPG_Vec <- commute %>%
filter(!is.na(mpg_Evening)) %>%
pull(mpg_Evening)
tTest <- t.test(x = morningMPG_Vec, y = eveningMPG_Vec)
tTestSignificance <-
if(tTest$p.value > 0.10) {
""
} else if(tTest$p.value > 0.05)  {
"*"
} else if(tTest$p.value > 0.01)  {
"**"
} else {
"***"
}
mpgTestTable <- tibble(mean(morningMPG_Vec),
mean(eveningMPG_Vec),
mean(morningMPG_Vec) - mean(eveningMPG_Vec),
tTest$p.value,
tTestSignificance)
mpgTestTable
runApp()
View(commute)
mean(commute$totalCommute_Morning)
commute %>% filter(!is.na(totalCommute_Morning)) %>% mean()
commute %>% filter(!is.na(totalCommute_Morning)) %>% pull(totalCommute_Morning) %>% mean()
runApp()
?formatDate
runApp()
?infoBox
runApp()
runApp()
View(commuteRaw)
View(commute)
runApp()
View(commute)
runApp()
?mean
runApp()
