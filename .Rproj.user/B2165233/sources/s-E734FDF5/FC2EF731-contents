# test comment
shinyServer(function(input, output, session) {


  # Reactive base data ----
  data <- reactive({
    if (input$cb_imputeDriveHome == TRUE) {
      averageDriveHomeSec <- commute %>%
        filter(!is.na(totalDriveHome)) %>%
        select(totalDriveHome) %>%
        summarize(mean(totalDriveHome)) %>%
        unlist() %>%
        unname() %>%
        as.double() * 60

      commuteImputed <- commute %>% mutate(arriveHome = if_else((is.na(arriveHome) & !is.na(carDepart_Evening)),
        carDepart_Evening + averageDriveHomeSec,
        arriveHome
      ))
      print(commuteImputed %>% select(arriveHome))
      return(commuteImputed)
    } else {
      return(commute)
    }
  })

  # Work arrive/depart density plot ----
  output$arriveAndLeaveWork_DensityPlot <- renderPlot({
    tempPlotData <-
      data() %>%
      select(arriveWork, departWork) %>%
      gather()

    plot <- data.frame(tempPlotData) %>% ggplot(aes(x = value, fill = key))
    plot + geom_density(alpha = 0.25)
  })

  # Typical arrival home for given evening train ----
  output$arriveHomeForGivenTrain_DensityPlot <- renderPlot({
    tempPlotData <- data() %>%
      filter(trainNum_Evening == "331") %>%
      select(arriveHome) %>%
      gather()
    plot <- data.frame(tempPlotData) %>% ggplot(aes(x = value, fill = key))
    plot + geom_density(alpha = 0.25)
  })

  # Density Plot of arriveHome by trainNum_Evening ----
  output$arriveHomeForEachTrain_DensityPlot <- renderPlot({
    tempPlotData <- data() %>%
      filter(!is.na(arriveHome)) %>% # filter(!trainNum_Evening=="333") %>%
      select(trainNum_Evening, arriveHome)
    plot <- data.frame(tempPlotData) %>% ggplot(aes(x = arriveHome, fill = trainNum_Evening))
    # plot + geom_histogram()
    plot + geom_density(alpha = 0.5)
  })

  # Table of typicial arrival home based on evening train----
  output$arriveHomeMeanByTrain_Table <- renderDT({
    data() %>%
      filter(!is.na(arriveHome)) %>%
      group_by(trainNum_Evening) %>%
      summarize(
        result = mean(arriveHome),
        count = n()
      ) %>%
      datatable(
        options = list(
          paging = FALSE,
          searching = FALSE,
          bInfo = FALSE
        ),
        rownames = FALSE,
        colnames = c(
          "Evening Train Number",
          "Average Arrive Home Time",
          "Count"
        ),
        filter = "none",
        autoHideNavigation = TRUE
      ) %>%
      formatDate(
        columns = "result",
        method = "toLocaleTimeString",
        params = list(
          "en-US",
          list(
            hour = "2-digit",
            minute = "2-digit",
            timeZone = "GMT",
            hour12 = FALSE
          )
        )
      )
  })



  # Table of typicial arrival at work based on morning train----
  output$arriveWorkMeanByTrain_Table <- renderDT({
    data() %>%
      filter(!is.na(arriveWork)) %>%
      group_by(trainNum_Morning) %>%
      summarize(
        result = mean(arriveWork),
        count = n()
      ) %>%
      datatable(
        options = list(
          paging = FALSE,
          searching = FALSE,
          bInfo = FALSE
        ),
        rownames = FALSE,
        colnames = c(
          "Morning Train Number",
          "Average Arrive Work Time",
          "Count"
        ),
        filter = "none",
        autoHideNavigation = TRUE
      ) %>%
      formatDate(
        columns = "result",
        method = "toLocaleTimeString",
        params = list(
          "en-US",
          list(
            hour = "2-digit",
            minute = "2-digit",
            timeZone = "GMT",
            hour12 = FALSE
          )
        )
      )
  })



  # Morning Commute InfoBox----
  output$morningCommute_InfoBox <- renderInfoBox({
    
    morningCommuteAverage <- data() %>%
      filter(!is.na(totalCommute_Morning)) %>%
      select(totalCommute_Morning) %>%
      summarize(
        meanMorningCommute = round(mean(totalCommute_Morning), 2)
      )

  infoBox(
      title = "Average Morning Commute",
      value = paste0(morningCommuteAverage, " hours"),
      icon = icon("calendar"),
      color = "aqua",
      fill = TRUE
    )
  })
  
  # Evening Commute InfoBox----
  output$eveningCommute_InfoBox <- renderInfoBox({

    eveningCommuteAverage <- data() %>%
      filter(!is.na(totalCommute_Evening)) %>%
      select(totalCommute_Evening) %>%
      summarize(
        meanEveningCommute = round(mean(totalCommute_Evening), 2)
      )
    
    infoBox(
      title = "Average Evening Commute",
      value = paste0(eveningCommuteAverage, " hours"),
      icon = icon("calendar"),
      color = "aqua",
      fill = TRUE
    )
  })


  # Troubleshooting table to show data() ----
  output$ts_Data <- renderDT({
    data() %>%
      select(trainNum_Evening, arriveHome) %>%
      datatable(rownames = FALSE) %>%
      formatDate("arriveHome",
        method = "toLocaleTimeString",
        params = list(
          "en-US",
          list(
            hour = "2-digit",
            minute = "2-digit",
            timeZone = "GMT",
            hour12 = FALSE
          )
        )
      )
  })
})
